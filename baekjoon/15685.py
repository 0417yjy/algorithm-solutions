"""
15685 드래곤 커브
----------------------------------- 문제 -----------------------------------
드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.

시작 점
시작 방향
세대
0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.

1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.

2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)

3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.

즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.

크기가 100×100인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.
----------------------------------- 입력 -----------------------------------
첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. 드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다. (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)

입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.

방향은 0, 1, 2, 3 중 하나이고, 다음을 의미한다.

0: x좌표가 증가하는 방향 (→)
1: y좌표가 감소하는 방향 (↑)
2: x좌표가 감소하는 방향 (←)
3: y좌표가 증가하는 방향 (↓)
----------------------------------- 출력 -----------------------------------
첫째 줄에 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 출력한다.
----------------------------------- 예제 1 -----------------------------------
3
3 3 0 1
4 2 1 3
4 2 2 1

4
----------------------------------- 예제 2 -----------------------------------
4
3 3 0 1
4 2 1 3
4 2 2 1
2 7 3 4

11
----------------------------------- 예제 3 -----------------------------------
10
5 5 0 0
5 6 0 0
5 7 0 0
5 8 0 0
5 9 0 0
6 5 0 0
6 6 0 0
6 7 0 0
6 8 0 0
6 9 0 0

8
----------------------------------- 예제 4 -----------------------------------
4
50 50 0 10
50 50 1 10
50 50 2 10
50 50 3 10

1992
"""
from copy import deepcopy

def get_next_direction(direction):
    direction += 1
    if direction > 3:
        return 0
    else:
        return direction

def get_next_point(x, y, d):
    if d == 0:
        return (x + 1, y)
    elif d == 1:
        return (x, y - 1)
    elif d == 2:
        return (x - 1, y)
    elif d == 3:
        return (x, y + 1)

n = int(input())
board = [[0] * 100 for _ in range(100)]
points_set = set()

for i in range(n):
    x, y, d, g = map(int, input().split())

    steps_stack = [d]
    for j in range(g):
        # 세대만큼 반복하면서, 그리기
        for k in range(len(steps_stack) - 1, -1, -1):            
            nd = get_next_direction(steps_stack[k])
            steps_stack.append(nd)

    points_set.add((x, y))
    for j in range(len(steps_stack)):        
        next_point = get_next_point(x, y, steps_stack[j])
        points_set.add(next_point)
        x, y = next_point

cnt = 0
for base_point in points_set:
    x, y = base_point
    square_points = set(((x, y), (x + 1, y), (x, y + 1), (x + 1, y + 1)))
    if square_points.issubset(points_set):
        cnt += 1

print(cnt)